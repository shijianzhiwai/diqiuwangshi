(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{379:function(t,a,e){t.exports=e.p+"assets/img/master_theorem.95f1ef3a.png"},380:function(t,a,e){t.exports=e.p+"assets/img/operations.a3feda6d.png"},381:function(t,a,e){t.exports=e.p+"assets/img/Big-O-Cheat-Sheet.98b9d1d8.png"},409:function(t,a,e){"use strict";e.r(a);var s=e(9),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"《算法面试通关40讲》"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#《算法面试通关40讲》"}},[t._v("#")]),t._v(" 《算法面试通关40讲》")]),t._v(" "),s("p",[t._v("之前也尝试刷过算法，但是一段时间之后就不继续了，现在找了一个比较功利的算法练习课程，再从头到尾刷一遍试试看。")]),t._v(" "),s("p",[t._v("笔记记录的方法为先看一遍课程，然后再练习、整理记录。")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_02-如何事半功倍地学习算法与数据结构"}},[t._v("02 | 如何事半功倍地学习算法与数据结构")])]),s("li",[s("a",{attrs:{href:"#_03-如何计算算法的复杂度"}},[t._v("03 | 如何计算算法的复杂度")]),s("ul",[s("li",[s("a",{attrs:{href:"#data-structure"}},[t._v("Data Structure")])]),s("li",[s("a",{attrs:{href:"#algorithm"}},[t._v("Algorithm")])]),s("li",[s("a",{attrs:{href:"#主定理（master-theorem）"}},[t._v("主定理（master theorem）")])])])]),s("li",[s("a",{attrs:{href:"#_04-如何通过leetcode来进行算法题目练习"}},[t._v("04 | 如何通过LeetCode来进行算法题目练习")])]),s("li",[s("a",{attrs:{href:"#_05-理论讲解：数组-链表"}},[t._v("05 | 理论讲解：数组&链表")]),s("ul",[s("li",[s("a",{attrs:{href:"#数组"}},[t._v("数组")])]),s("li",[s("a",{attrs:{href:"#链表"}},[t._v("链表")])])])]),s("li",[s("a",{attrs:{href:"#_06-面试题：反转一个单链表-判断链表是否有环"}},[t._v("06 | 面试题：反转一个单链表&判断链表是否有环")])]),s("li",[s("a",{attrs:{href:"#_07-理论讲解：堆栈-队列"}},[t._v("07 | 理论讲解：堆栈&队列")])]),s("li",[s("a",{attrs:{href:"#_08-面试题：判断括号字符串是否有效"}},[t._v("08 | 面试题：判断括号字符串是否有效")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"_02-如何事半功倍地学习算法与数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-如何事半功倍地学习算法与数据结构"}},[t._v("#")]),t._v(" 02 | 如何事半功倍地学习算法与数据结构")]),t._v(" "),s("p",[t._v("书籍：《异类 —— 不一样的成功启示录》")]),t._v(" "),s("p",[t._v("学习方法：")]),t._v(" "),s("ul",[s("li",[t._v("Chunk it up（切碎知识点，基本组成，基础之前的链接）")]),t._v(" "),s("li",[t._v("Deliberate practicing（"),s("strong",[t._v("刻意练习，练习缺陷，弱点，不舒服的点")]),t._v("）")]),t._v(" "),s("li",[t._v("Feedback（获得反馈）")])]),t._v(" "),s("p",[t._v("规范化练习思路，切题四件套")]),t._v(" "),s("ul",[s("li",[t._v("Clarification（明确，审题，搞懂意思）")]),t._v(" "),s("li",[t._v("Possible solutions（可能的所有解题方案）\n"),s("ul",[s("li",[t._v("compare(time/space)")]),t._v(" "),s("li",[t._v("optimal(加强）")])])]),t._v(" "),s("li",[t._v("Coding（多写）")]),t._v(" "),s("li",[t._v("Test cases")])]),t._v(" "),s("h2",{attrs:{id:"_03-如何计算算法的复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_03-如何计算算法的复杂度"}},[t._v("#")]),t._v(" 03 | 如何计算算法的复杂度")]),t._v(" "),s("h3",{attrs:{id:"data-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-structure"}},[t._v("#")]),t._v(" Data Structure")]),t._v(" "),s("ul",[s("li",[t._v("Array")]),t._v(" "),s("li",[t._v("Stack / Queue")]),t._v(" "),s("li",[t._v("PriorityQueue (heap) 优先级队列（堆）")]),t._v(" "),s("li",[t._v("LinkedList (single / double)")]),t._v(" "),s("li",[t._v("Tree / Binary Tree 二叉树")]),t._v(" "),s("li",[t._v("Binary Search Tree 二叉搜索树")]),t._v(" "),s("li",[t._v("HashTable")]),t._v(" "),s("li",[t._v("Disjoint Set 并查集")]),t._v(" "),s("li",[t._v("Trie 前缀树")]),t._v(" "),s("li",[t._v("BloomFilter 布隆过滤器")]),t._v(" "),s("li",[t._v("LRU Cache")])]),t._v(" "),s("h3",{attrs:{id:"algorithm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[t._v("#")]),t._v(" Algorithm")]),t._v(" "),s("ul",[s("li",[t._v("General Coding")]),t._v(" "),s("li",[t._v("In-order/Pre-order/Post-order traversal 前、中、后序遍历")]),t._v(" "),s("li",[t._v("Greedy 贪心算法")]),t._v(" "),s("li",[t._v("Recursion/Backtrace 递归/回溯")]),t._v(" "),s("li",[t._v("Breadth-first search 广度优先")]),t._v(" "),s("li",[t._v("Depth-first search 深度优先")]),t._v(" "),s("li",[t._v("Divide and Conquer 分治")]),t._v(" "),s("li",[t._v("Dynamic Programming 动态规划")]),t._v(" "),s("li",[t._v("Binary Search 二分查找")]),t._v(" "),s("li",[t._v("Graph 图")])]),t._v(" "),s("h3",{attrs:{id:"主定理（master-theorem）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主定理（master-theorem）"}},[t._v("#")]),t._v(" 主定理（master theorem）")]),t._v(" "),s("p",[s("img",{attrs:{src:e(379),alt:"master_theorem.png"}})]),t._v(" "),s("h2",{attrs:{id:"_04-如何通过leetcode来进行算法题目练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_04-如何通过leetcode来进行算法题目练习"}},[t._v("#")]),t._v(" 04 | 如何通过LeetCode来进行算法题目练习")]),t._v(" "),s("ul",[s("li",[t._v("做题之前先思考解法，并且知道对应的时间复杂度")]),t._v(" "),s("li",[t._v("看别人的解法，反馈的过程")])]),t._v(" "),s("h2",{attrs:{id:"_05-理论讲解：数组-链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-理论讲解：数组-链表"}},[t._v("#")]),t._v(" 05 | 理论讲解：数组&链表")]),t._v(" "),s("h3",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("ul",[s("li",[t._v("查询时间复杂度 O(1)")]),t._v(" "),s("li",[t._v("插入的时间复杂度最坏情况为 O(n)，平均值为 O(n/2)")]),t._v(" "),s("li",[t._v("删除的时间复杂度同上")])]),t._v(" "),s("h3",{attrs:{id:"链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),s("ul",[s("li",[t._v("head、tail 头尾")]),t._v(" "),s("li",[t._v("特殊的：单独存储头尾指针")]),t._v(" "),s("li",[t._v("插入删除时间复杂度为 O(1)，查找为 O(n)")])]),t._v(" "),s("h2",{attrs:{id:"_06-面试题：反转一个单链表-判断链表是否有环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_06-面试题：反转一个单链表-判断链表是否有环"}},[t._v("#")]),t._v(" 06 | 面试题：反转一个单链表&判断链表是否有环")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("reverse-linked-list"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverseList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ListNode "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ListNode\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 思路：当前节点的 next 换成上一个的指针，同时需要一个变量 next 缓存上一个指针")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次循环记录当前节点指针到缓存变量中")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里交换涉及到中间变量，这么想会比较简单，先进行交换，发现交换的值需要使用，再使用 tmp 缓存下来")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如 当前 next 换成之前缓存的，那么 head.Next = next")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// head.Next 是下一个节点，是有用的，所以在这之前定义 tmp := head.Next ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这么想不容易闹混")]),t._v("\n        tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Next \n        head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next\n        next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n        head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" next\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("p",[t._v("相关习题：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("reverse-linked-list"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("swap-nodes-in-pairs"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"}},[t._v("linked-list-cycle"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("linked-list-cycle-ii"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("解法提示：")]),t._v(" "),s("ul",[s("li",[t._v("map")]),t._v(" "),s("li",[t._v("快慢指针")])]),t._v(" "),s("h2",{attrs:{id:"_07-理论讲解：堆栈-队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_07-理论讲解：堆栈-队列"}},[t._v("#")]),t._v(" 07 | 理论讲解：堆栈&队列")]),t._v(" "),s("ul",[s("li",[t._v("Stack 栈 先进先出 FIFO")]),t._v(" "),s("li",[t._v("Queue 队列 先进后出 FILO")])]),t._v(" "),s("p",[t._v("使用数组或者链表实现均可。")]),t._v(" "),s("p",[t._v("常见数据结构时间复杂度（来源 "),s("a",{attrs:{href:"https://www.bigocheatsheet.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.bigocheatsheet.com/"),s("OutboundLink")],1),t._v("）：")]),t._v(" "),s("p",[s("img",{attrs:{src:e(380),alt:"时间复杂度"}})]),t._v(" "),s("p",[t._v("来源："),s("a",{attrs:{href:"https://www.deviantart.com/assyrianic/art/Big-O-Notation-Cheat-Sheet-762169573",target:"_blank",rel:"noopener noreferrer"}},[t._v("Big O Cheat Sheet"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("img",{attrs:{src:e(381),alt:"Big O Cheat Sheet"}})]),t._v(" "),s("h2",{attrs:{id:"_08-面试题：判断括号字符串是否有效"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_08-面试题：判断括号字符串是否有效"}},[t._v("#")]),t._v(" 08 | 面试题：判断括号字符串是否有效")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"}},[t._v("valid-parentheses"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Go 使用数组实现 stack 要点：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pop")]),t._v("\nstack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// peak")]),t._v("\nstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// push")]),t._v("\nstack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);